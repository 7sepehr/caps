{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Competitor Price Forecasting - LightGBM Ensemble Model\n",
    "# Retailz Pricing Analysis and Forecasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All libraries imported successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Model libraries\n",
    "import lightgbm as lgb\n",
    "from sklearn.ensemble import VotingRegressor\n",
    "from sklearn.linear_model import LinearRegression, Ridge\n",
    "from sklearn.model_selection import TimeSeriesSplit, cross_val_score\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error\n",
    "from sklearn.pipeline import Pipeline\n",
    "import joblib\n",
    "\n",
    "# Database\n",
    "import sqlite3\n",
    "\n",
    "print(\"All libraries imported successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 2: Data Loading and Initial Exploration\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Datasets loaded successfully!\n",
      "Prices dataset shape: (3112140, 7)\n",
      "Structures dataset shape: (1864594, 7)\n",
      "Campaigns dataset shape: (99, 4)\n",
      "\n",
      "=== PRICE DATASET INFO ===\n",
      "    sku  time_key   competitor  pvp_was  discount  flag_promo leaflet\n",
      "0  2056  20240312        chain    21.70    0.0000           0     NaN\n",
      "1  4435  20230621        chain    18.92    0.2754           1  weekly\n",
      "2  1951  20230303  competitorA    60.58    0.3524           1     NaN\n",
      "3  2135  20240605        chain    55.37    0.2509           1  weekly\n",
      "4  3949  20230529        chain    51.90    0.0000           0     NaN\n",
      "\n",
      "Unique competitors: ['chain' 'competitorA' 'competitorB']\n",
      "Date range: 20230103 to 20241028\n"
     ]
    }
   ],
   "source": [
    "def load_datasets():\n",
    "    \"\"\"Load all datasets with proper error handling\"\"\"\n",
    "    try:\n",
    "        # Load main datasets\n",
    "        prices_df = pd.read_csv('data/product_prices_leaflets.csv')\n",
    "        structures_df = pd.read_csv('data/product_structures_sales.csv')\n",
    "        campaigns_df = pd.read_csv('data/chain_campaigns.csv')\n",
    "        \n",
    "        # Load Portugal campaigns (optional)\n",
    "        try:\n",
    "            portugal_campaigns_df = pd.read_csv('data/portugal_retail_campaigns_2025_updated.csv')\n",
    "        except:\n",
    "            portugal_campaigns_df = None\n",
    "            print(\"Portugal campaigns file not found - creating dummy data\")\n",
    "        \n",
    "        print(\"✅ Datasets loaded successfully!\")\n",
    "        print(f\"Prices dataset shape: {prices_df.shape}\")\n",
    "        print(f\"Structures dataset shape: {structures_df.shape}\")\n",
    "        print(f\"Campaigns dataset shape: {campaigns_df.shape}\")\n",
    "        \n",
    "        return prices_df, structures_df, campaigns_df, portugal_campaigns_df\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"❌ Error loading datasets: {e}\")\n",
    "        return None, None, None, None\n",
    "\n",
    "# Load datasets\n",
    "prices_df, structures_df, campaigns_df, portugal_campaigns_df = load_datasets()\n",
    "\n",
    "# Display basic info\n",
    "if prices_df is not None:\n",
    "    print(\"\\n=== PRICE DATASET INFO ===\")\n",
    "    print(prices_df.head())\n",
    "    print(f\"\\nUnique competitors: {prices_df['competitor'].unique()}\")\n",
    "    print(f\"Date range: {prices_df['time_key'].min()} to {prices_df['time_key'].max()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 3: Data Quality Assessment and Cleaning\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== DATA QUALITY ASSESSMENT ===\n",
      "\n",
      "Missing values in prices dataset:\n",
      "sku                 0\n",
      "time_key            0\n",
      "competitor          0\n",
      "pvp_was             0\n",
      "discount            0\n",
      "flag_promo          0\n",
      "leaflet       2510555\n",
      "dtype: int64\n",
      "\n",
      "Missing values in structures dataset:\n",
      "structure_level_4    0\n",
      "structure_level_3    0\n",
      "structure_level_2    0\n",
      "structure_level_1    0\n",
      "sku                  0\n",
      "time_key             0\n",
      "quantity             0\n",
      "dtype: int64\n",
      "\n",
      "Missing values in campaigns dataset:\n",
      "competitor        0\n",
      "start_date        0\n",
      "end_date          0\n",
      "chain_campaign    0\n",
      "dtype: int64\n",
      "\n",
      "Negative discount values: 40\n",
      "Negative quantity values: 292\n",
      "\n",
      "Duplicates in prices: 0\n",
      "Duplicates in structures: 0\n",
      "\n",
      "Price data date range: 20230103 - 20241028\n",
      "Structure data date range: 20230103 - 20241028\n",
      "=== DATA CLEANING ===\n",
      "\n",
      "Removed 40 rows with negative discounts\n",
      "Removed 292 rows with negative quantities\n",
      "✅ Data cleaning completed!\n"
     ]
    }
   ],
   "source": [
    "def assess_data_quality(prices_df, structures_df, campaigns_df):\n",
    "    \"\"\"Comprehensive data quality assessment\"\"\"\n",
    "    \n",
    "    print(\"=== DATA QUALITY ASSESSMENT ===\\n\")\n",
    "    \n",
    "    # Check for missing values\n",
    "    print(\"Missing values in prices dataset:\")\n",
    "    print(prices_df.isnull().sum())\n",
    "    print(\"\\nMissing values in structures dataset:\")\n",
    "    print(structures_df.isnull().sum())\n",
    "    print(\"\\nMissing values in campaigns dataset:\")\n",
    "    print(campaigns_df.isnull().sum())\n",
    "    \n",
    "    # Check for negative values (errors)\n",
    "    print(f\"\\nNegative discount values: {(prices_df['discount'] < 0).sum()}\")\n",
    "    print(f\"Negative quantity values: {(structures_df['quantity'] < 0).sum()}\")\n",
    "    \n",
    "    # Check duplicates\n",
    "    print(f\"\\nDuplicates in prices: {prices_df.duplicated().sum()}\")\n",
    "    print(f\"Duplicates in structures: {structures_df.duplicated().sum()}\")\n",
    "    \n",
    "    # Date range validation\n",
    "    print(f\"\\nPrice data date range: {prices_df['time_key'].min()} - {prices_df['time_key'].max()}\")\n",
    "    print(f\"Structure data date range: {structures_df['time_key'].min()} - {structures_df['time_key'].max()}\")\n",
    "\n",
    "def clean_data(prices_df, structures_df):\n",
    "    \"\"\"Clean and preprocess the datasets\"\"\"\n",
    "    \n",
    "    print(\"=== DATA CLEANING ===\\n\")\n",
    "    \n",
    "    # Clean prices dataset\n",
    "    prices_clean = prices_df.copy()\n",
    "    \n",
    "    # Remove negative discount values (errors)\n",
    "    initial_rows = len(prices_clean)\n",
    "    prices_clean = prices_clean[prices_clean['discount'] >= 0]\n",
    "    print(f\"Removed {initial_rows - len(prices_clean)} rows with negative discounts\")\n",
    "    \n",
    "    # Clean structures dataset\n",
    "    structures_clean = structures_df.copy()\n",
    "    \n",
    "    # Remove negative quantity values (errors)\n",
    "    initial_rows = len(structures_clean)\n",
    "    structures_clean = structures_clean[structures_clean['quantity'] >= 0]\n",
    "    print(f\"Removed {initial_rows - len(structures_clean)} rows with negative quantities\")\n",
    "    \n",
    "    # Convert time_key to datetime\n",
    "    prices_clean['date'] = pd.to_datetime(prices_clean['time_key'], format='%Y%m%d')\n",
    "    structures_clean['date'] = pd.to_datetime(structures_clean['time_key'], format='%Y%m%d')\n",
    "    \n",
    "    # Calculate final price after discount\n",
    "    prices_clean['final_price'] = prices_clean['pvp_was'] * (1 - prices_clean['discount'])\n",
    "    \n",
    "    print(\"✅ Data cleaning completed!\")\n",
    "    return prices_clean, structures_clean\n",
    "\n",
    "# Assess and clean data\n",
    "if prices_df is not None:\n",
    "    assess_data_quality(prices_df, structures_df, campaigns_df)\n",
    "    prices_clean, structures_clean = clean_data(prices_df, structures_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 4: Feature Engineering\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== FEATURE ENGINEERING ===\n",
      "\n",
      "Merged dataset shape: (3112100, 14)\n",
      "✅ Feature engineering completed!\n",
      "Final dataset shape: (3112100, 43)\n",
      "Feature columns: ['sku', 'time_key', 'competitor', 'pvp_was', 'discount', 'flag_promo', 'leaflet', 'date', 'final_price', 'structure_level_1', 'structure_level_2', 'structure_level_3', 'structure_level_4', 'quantity', 'year', 'month', 'day', 'weekday', 'quarter', 'week_of_year', 'price_lag_1', 'discount_lag_1', 'price_lag_7', 'discount_lag_7', 'price_lag_14', 'discount_lag_14', 'price_lag_30', 'discount_lag_30', 'price_rolling_mean_7', 'price_rolling_std_7', 'price_rolling_mean_14', 'price_rolling_std_14', 'price_rolling_mean_30', 'price_rolling_std_30', 'is_campaign', 'chain_vs_competitorA_diff', 'chain_vs_competitorA_ratio', 'chain_vs_competitorB_diff', 'chain_vs_competitorB_ratio', 'competitorA_vs_competitorB_diff', 'competitorA_vs_competitorB_ratio', 'leaflet_encoded', 'leaflet_numeric']\n"
     ]
    }
   ],
   "source": [
    "def create_campaign_features(campaigns_df):\n",
    "    \"\"\"Create campaign features from campaign data\"\"\"\n",
    "    \n",
    "    if campaigns_df is None:\n",
    "        return pd.DataFrame()\n",
    "    \n",
    "    campaigns_processed = campaigns_df.copy()\n",
    "    campaigns_processed['start_date'] = pd.to_datetime(campaigns_processed['start_date'])\n",
    "    campaigns_processed['end_date'] = pd.to_datetime(campaigns_processed['end_date'])\n",
    "    campaigns_processed['campaign_duration'] = (\n",
    "        campaigns_processed['end_date'] - campaigns_processed['start_date']\n",
    "    ).dt.days\n",
    "    \n",
    "    return campaigns_processed\n",
    "\n",
    "def engineer_features(prices_clean, structures_clean, campaigns_processed):\n",
    "    \"\"\"Comprehensive feature engineering\"\"\"\n",
    "    print(\"=== FEATURE ENGINEERING ===\\n\")\n",
    "    \n",
    "    # Merge prices with product structures\n",
    "    merged_df = prices_clean.merge(\n",
    "        structures_clean[['sku', 'time_key', 'structure_level_1', 'structure_level_2', \n",
    "                         'structure_level_3', 'structure_level_4', 'quantity']].drop_duplicates(),\n",
    "        on=['sku', 'time_key'],\n",
    "        how='left'\n",
    "    )\n",
    "    \n",
    "    print(f\"Merged dataset shape: {merged_df.shape}\")\n",
    "    \n",
    "    # Sort by competitor, sku, and date for time series features\n",
    "    merged_df = merged_df.sort_values(['competitor', 'sku', 'date'])\n",
    "    \n",
    "    # Create time-based features\n",
    "    merged_df['year'] = merged_df['date'].dt.year\n",
    "    merged_df['month'] = merged_df['date'].dt.month\n",
    "    merged_df['day'] = merged_df['date'].dt.day\n",
    "    merged_df['weekday'] = merged_df['date'].dt.weekday\n",
    "    merged_df['quarter'] = merged_df['date'].dt.quarter\n",
    "    merged_df['week_of_year'] = merged_df['date'].dt.isocalendar().week\n",
    "    \n",
    "    # Create lag features for prices\n",
    "    for lag in [1, 7, 14, 30]:\n",
    "        merged_df[f'price_lag_{lag}'] = merged_df.groupby(['competitor', 'sku'])['final_price'].shift(lag)\n",
    "        merged_df[f'discount_lag_{lag}'] = merged_df.groupby(['competitor', 'sku'])['discount'].shift(lag)\n",
    "    \n",
    "    # Create rolling statistics\n",
    "    for window in [7, 14, 30]:\n",
    "        merged_df[f'price_rolling_mean_{window}'] = (\n",
    "            merged_df.groupby(['competitor', 'sku'])['final_price']\n",
    "            .transform(lambda x: x.rolling(window, min_periods=1).mean())\n",
    "        )\n",
    "        merged_df[f'price_rolling_std_{window}'] = (\n",
    "            merged_df.groupby(['competitor', 'sku'])['final_price']\n",
    "            .transform(lambda x: x.rolling(window, min_periods=1).std())\n",
    "        )\n",
    "    \n",
    "    # Create campaign indicators\n",
    "    if campaigns_processed is not None and len(campaigns_processed) > 0:\n",
    "        merged_df['is_campaign'] = 0\n",
    "        for _, campaign in campaigns_processed.iterrows():\n",
    "            mask = (\n",
    "                (merged_df['competitor'] == campaign['competitor']) &\n",
    "                (merged_df['date'] >= campaign['start_date']) &\n",
    "                (merged_df['date'] <= campaign['end_date'])\n",
    "            )\n",
    "            merged_df.loc[mask, 'is_campaign'] = 1\n",
    "    else:\n",
    "        merged_df['is_campaign'] = 0\n",
    "    \n",
    "    # Price comparison features (competitor vs chain)\n",
    "    price_pivot = merged_df.pivot_table(\n",
    "        index=['sku', 'date'],\n",
    "        columns='competitor',\n",
    "        values='final_price',\n",
    "        aggfunc='mean'\n",
    "    ).reset_index()\n",
    "    \n",
    "    # Calculate price differences if we have multiple competitors\n",
    "    competitors = merged_df['competitor'].unique()\n",
    "    if len(competitors) > 1:\n",
    "        for i, comp1 in enumerate(competitors):\n",
    "            for comp2 in competitors[i+1:]:\n",
    "                if comp1 in price_pivot.columns and comp2 in price_pivot.columns:\n",
    "                    price_pivot[f'{comp1}_vs_{comp2}_diff'] = price_pivot[comp1] - price_pivot[comp2]\n",
    "                    price_pivot[f'{comp1}_vs_{comp2}_ratio'] = price_pivot[comp1] / (price_pivot[comp2] + 1e-8)\n",
    "        \n",
    "        # Merge back price comparison features\n",
    "        comparison_cols = [col for col in price_pivot.columns if '_vs_' in col]\n",
    "        if comparison_cols:\n",
    "            merged_df = merged_df.merge(\n",
    "                price_pivot[['sku', 'date'] + comparison_cols],\n",
    "                on=['sku', 'date'],\n",
    "                how='left'\n",
    "            )\n",
    "    \n",
    "    # Leaflet encoding\n",
    "    merged_df['leaflet_encoded'] = merged_df['leaflet'].fillna('none')\n",
    "    leaflet_encoder = LabelEncoder()\n",
    "    merged_df['leaflet_numeric'] = leaflet_encoder.fit_transform(merged_df['leaflet_encoded'])\n",
    "    \n",
    "    print(\"✅ Feature engineering completed!\")\n",
    "    print(f\"Final dataset shape: {merged_df.shape}\")\n",
    "    print(f\"Feature columns: {merged_df.columns.tolist()}\")\n",
    "    \n",
    "    return merged_df, leaflet_encoder\n",
    "\n",
    "# Create features\n",
    "if prices_df is not None:\n",
    "    campaigns_processed = create_campaign_features(campaigns_df)\n",
    "    featured_df, leaflet_encoder = engineer_features(prices_clean, structures_clean, campaigns_processed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 5: Model Preparation and Dataset Split\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== PREPARING MODELING DATA ===\n",
      "\n",
      "Selected 38 features for modeling\n",
      "Training period: 2023-01-03 00:00:00 to 2024-06-17 00:00:00\n",
      "Validation period: 2024-06-18 00:00:00 to 2024-08-22 00:00:00\n",
      "Test period: 2024-08-23 00:00:00 to 2024-10-28 00:00:00\n"
     ]
    }
   ],
   "source": [
    "def prepare_modeling_data(featured_df):\n",
    "    \"\"\"Prepare data for modeling with proper train/validation/test splits\"\"\"\n",
    "    \n",
    "    print(\"=== PREPARING MODELING DATA ===\\n\")\n",
    "    \n",
    "    # Filter for competitors A and B only (assuming these are our targets)\n",
    "    target_competitors = ['competitorA', 'competitorB']\n",
    "    available_competitors = featured_df['competitor'].unique()\n",
    "    \n",
    "    # Use available competitors if targets not found\n",
    "    if not any(comp in available_competitors for comp in target_competitors):\n",
    "        target_competitors = available_competitors[:2] if len(available_competitors) >= 2 else available_competitors\n",
    "        print(f\"Using available competitors: {target_competitors}\")\n",
    "    \n",
    "    modeling_df = featured_df[featured_df['competitor'].isin(target_competitors)].copy()\n",
    "    \n",
    "    # Select features for modeling\n",
    "    feature_cols = [\n",
    "        'sku', 'pvp_was', 'discount', 'flag_promo', 'leaflet_numeric',\n",
    "        'structure_level_1', 'structure_level_2', 'structure_level_3', 'structure_level_4',\n",
    "        'quantity', 'year', 'month', 'day', 'weekday', 'quarter', 'week_of_year',\n",
    "        'is_campaign'\n",
    "    ]\n",
    "    \n",
    "    # Add lag and rolling features\n",
    "    lag_cols = [col for col in modeling_df.columns if 'lag_' in col or 'rolling_' in col]\n",
    "    feature_cols.extend(lag_cols)\n",
    "    \n",
    "    # Add comparison features\n",
    "    comparison_cols = [col for col in modeling_df.columns if '_vs_' in col]\n",
    "    feature_cols.extend(comparison_cols)\n",
    "    \n",
    "    # Keep only available columns\n",
    "    feature_cols = [col for col in feature_cols if col in modeling_df.columns]\n",
    "    \n",
    "    print(f\"Selected {len(feature_cols)} features for modeling\")\n",
    "    \n",
    "    # Create target variables for each competitor\n",
    "    target_data = []\n",
    "    for competitor in target_competitors:\n",
    "        comp_data = modeling_df[modeling_df['competitor'] == competitor].copy()\n",
    "        comp_data = comp_data[feature_cols + ['final_price', 'date', 'competitor']].copy()\n",
    "        comp_data[f'target_{competitor}'] = comp_data['final_price']\n",
    "        target_data.append(comp_data)\n",
    "    \n",
    "    # Time-based split (80% train, 10% validation, 10% test)\n",
    "    modeling_df_sorted = modeling_df.sort_values('date')\n",
    "    dates = modeling_df_sorted['date'].unique()\n",
    "    \n",
    "    train_end_idx = int(0.8 * len(dates))\n",
    "    val_end_idx = int(0.9 * len(dates))\n",
    "    \n",
    "    train_dates = dates[:train_end_idx]\n",
    "    val_dates = dates[train_end_idx:val_end_idx]\n",
    "    test_dates = dates[val_end_idx:]\n",
    "    \n",
    "    print(f\"Training period: {train_dates.min()} to {train_dates.max()}\")\n",
    "    print(f\"Validation period: {val_dates.min()} to {val_dates.max()}\")\n",
    "    print(f\"Test period: {test_dates.min()} to {test_dates.max()}\")\n",
    "    \n",
    "    return modeling_df, feature_cols, target_competitors, train_dates, val_dates, test_dates\n",
    "\n",
    "# Prepare modeling data\n",
    "if 'featured_df' in locals():\n",
    "    modeling_df, feature_cols, target_competitors, train_dates, val_dates, test_dates = prepare_modeling_data(featured_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 6: LightGBM Model Development\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Training model for competitorA ===\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  File \"c:\\ProgramData\\anaconda3\\Lib\\site-packages\\joblib\\externals\\loky\\backend\\context.py\", line 257, in _count_physical_cores\n",
      "    cpu_info = subprocess.run(\n",
      "               ^^^^^^^^^^^^^^^\n",
      "  File \"c:\\ProgramData\\anaconda3\\Lib\\subprocess.py\", line 548, in run\n",
      "    with Popen(*popenargs, **kwargs) as process:\n",
      "         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"c:\\ProgramData\\anaconda3\\Lib\\subprocess.py\", line 1026, in __init__\n",
      "    self._execute_child(args, executable, preexec_fn, close_fds,\n",
      "  File \"c:\\ProgramData\\anaconda3\\Lib\\subprocess.py\", line 1538, in _execute_child\n",
      "    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n",
      "                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation MAPE for competitorA: 0.0136\n",
      "\n",
      "=== Training model for competitorB ===\n",
      "Validation MAPE for competitorB: 0.0123\n",
      "\n",
      "✅ All models trained successfully!\n"
     ]
    }
   ],
   "source": [
    "class CompetitorPriceForecaster:\n",
    "    \"\"\"Main forecasting class with LightGBM ensemble\"\"\"\n",
    "    \n",
    "    def __init__(self, target_competitors):\n",
    "        self.target_competitors = target_competitors\n",
    "        self.models = {}\n",
    "        self.scalers = {}\n",
    "        self.feature_names = None\n",
    "        \n",
    "    def prepare_data(self, df, feature_cols, target_competitor):\n",
    "        \"\"\"Prepare data for a specific competitor\"\"\"\n",
    "        comp_data = df[df['competitor'] == target_competitor].copy()\n",
    "        X = comp_data[feature_cols].fillna(0)\n",
    "        y = comp_data['final_price']\n",
    "        return X, y, comp_data\n",
    "    \n",
    "    def create_lgb_model(self):\n",
    "        \"\"\"Create LightGBM model with optimal parameters\"\"\"\n",
    "        return lgb.LGBMRegressor(\n",
    "            objective='regression',\n",
    "            metric='mape',\n",
    "            boosting_type='gbdt',\n",
    "            num_leaves=31,\n",
    "            learning_rate=0.05,\n",
    "            feature_fraction=0.9,\n",
    "            bagging_fraction=0.8,\n",
    "            bagging_freq=5,\n",
    "            verbose=-1,\n",
    "            random_state=42\n",
    "        )\n",
    "    \n",
    "    def create_ensemble_model(self):\n",
    "        \"\"\"Create ensemble model with LightGBM, Ridge, and Linear\"\"\"\n",
    "        lgb_model = self.create_lgb_model()\n",
    "        ridge_model = Ridge(alpha=1.0, random_state=42)\n",
    "        linear_model = LinearRegression()\n",
    "        \n",
    "        ensemble = VotingRegressor([\n",
    "            ('lgb', lgb_model),\n",
    "            ('ridge', ridge_model),\n",
    "            ('linear', linear_model)\n",
    "        ], weights=[0.6, 0.3, 0.1])  # Higher weight for LightGBM\n",
    "        \n",
    "        return ensemble\n",
    "    \n",
    "    def fit(self, modeling_df, feature_cols, train_dates, val_dates):\n",
    "        \"\"\"Fit models for all target competitors\"\"\"\n",
    "        \n",
    "        self.feature_names = feature_cols\n",
    "        \n",
    "        for competitor in self.target_competitors:\n",
    "            print(f\"\\n=== Training model for {competitor} ===\")\n",
    "            \n",
    "            # Prepare training data\n",
    "            train_data = modeling_df[modeling_df['date'].isin(train_dates)]\n",
    "            X_train, y_train, _ = self.prepare_data(train_data, feature_cols, competitor)\n",
    "            \n",
    "            # Prepare validation data\n",
    "            val_data = modeling_df[modeling_df['date'].isin(val_dates)]\n",
    "            X_val, y_val, _ = self.prepare_data(val_data, feature_cols, competitor)\n",
    "            \n",
    "            if len(X_train) == 0 or len(X_val) == 0:\n",
    "                print(f\"⚠️ No data available for {competitor}\")\n",
    "                continue\n",
    "            \n",
    "            # Create and fit scaler\n",
    "            scaler = StandardScaler()\n",
    "            X_train_scaled = scaler.fit_transform(X_train)\n",
    "            X_val_scaled = scaler.transform(X_val)\n",
    "            \n",
    "            # Create and fit ensemble model\n",
    "            ensemble = self.create_ensemble_model()\n",
    "            ensemble.fit(X_train_scaled, y_train)\n",
    "            \n",
    "            # Validate\n",
    "            val_pred = ensemble.predict(X_val_scaled)\n",
    "            val_mape = mean_absolute_percentage_error(y_val, val_pred)\n",
    "            \n",
    "            print(f\"Validation MAPE for {competitor}: {val_mape:.4f}\")\n",
    "            \n",
    "            # Store model and scaler\n",
    "            self.models[competitor] = ensemble\n",
    "            self.scalers[competitor] = scaler\n",
    "        \n",
    "        print(\"\\n✅ All models trained successfully!\")\n",
    "    \n",
    "    def predict(self, X, competitor):\n",
    "        \"\"\"Make predictions for a specific competitor\"\"\"\n",
    "        if competitor not in self.models:\n",
    "            raise ValueError(f\"No model found for competitor {competitor}\")\n",
    "        \n",
    "        X_scaled = self.scalers[competitor].transform(X)\n",
    "        return self.models[competitor].predict(X_scaled)\n",
    "    \n",
    "    def predict_all(self, X):\n",
    "        \"\"\"Make predictions for all competitors\"\"\"\n",
    "        predictions = {}\n",
    "        for competitor in self.target_competitors:\n",
    "            if competitor in self.models:\n",
    "                predictions[competitor] = self.predict(X, competitor)\n",
    "        return predictions\n",
    "\n",
    "# Create and train the forecaster\n",
    "if 'modeling_df' in locals():\n",
    "    forecaster = CompetitorPriceForecaster(target_competitors)\n",
    "    forecaster.fit(modeling_df, feature_cols, train_dates, val_dates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 7: Model Evaluation and Testing\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== MODEL EVALUATION ===\n",
      "\n",
      "\n",
      "--- Evaluating competitorA ---\n",
      "MAPE: 0.0135\n",
      "RMSE: 1.2989\n",
      "MAE: 0.5094\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Evaluating competitorB ---\n",
      "MAPE: 0.0108\n",
      "RMSE: 3.3106\n",
      "MAE: 0.5737\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def evaluate_models(forecaster, modeling_df, feature_cols, test_dates):\n",
    "    \"\"\"Comprehensive model evaluation\"\"\"\n",
    "    \n",
    "    print(\"=== MODEL EVALUATION ===\\n\")\n",
    "    \n",
    "    results = {}\n",
    "    \n",
    "    for competitor in forecaster.target_competitors:\n",
    "        if competitor not in forecaster.models:\n",
    "            continue\n",
    "        \n",
    "        print(f\"\\n--- Evaluating {competitor} ---\")\n",
    "        \n",
    "        # Prepare test data\n",
    "        test_data = modeling_df[modeling_df['date'].isin(test_dates)]\n",
    "        X_test, y_test, test_info = forecaster.prepare_data(test_data, feature_cols, competitor)\n",
    "        \n",
    "        if len(X_test) == 0:\n",
    "            print(f\"No test data for {competitor}\")\n",
    "            continue\n",
    "        \n",
    "        # Make predictions\n",
    "        y_pred = forecaster.predict(X_test, competitor)\n",
    "        \n",
    "        # Calculate metrics\n",
    "        mape = mean_absolute_percentage_error(y_test, y_pred)\n",
    "        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "        mae = np.mean(np.abs(y_test - y_pred))\n",
    "        \n",
    "        results[competitor] = {\n",
    "            'mape': mape,\n",
    "            'rmse': rmse,\n",
    "            'mae': mae,\n",
    "            'predictions': y_pred,\n",
    "            'actual': y_test.values,\n",
    "            'test_info': test_info\n",
    "        }\n",
    "        \n",
    "        print(f\"MAPE: {mape:.4f}\")\n",
    "        print(f\"RMSE: {rmse:.4f}\")\n",
    "        print(f\"MAE: {mae:.4f}\")\n",
    "        \n",
    "        # Plot predictions vs actual\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        plt.scatter(y_test, y_pred, alpha=0.6)\n",
    "        plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)\n",
    "        plt.xlabel('Actual Price')\n",
    "        plt.ylabel('Predicted Price')\n",
    "        plt.title(f'{competitor} - Predictions vs Actual (MAPE: {mape:.4f})')\n",
    "        plt.show()\n",
    "    \n",
    "    return results\n",
    "\n",
    "# Evaluate models\n",
    "if 'forecaster' in locals():\n",
    "    evaluation_results = evaluate_models(forecaster, modeling_df, feature_cols, test_dates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 8: Model Persistence and API Preparation\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "71c36d21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== SAVING MODELS AND ARTIFACTS ===\n",
      "\n",
      "✅ Main forecaster saved\n",
      "✅ All artifacts saved successfully!\n",
      "=== CREATING DATABASE SCHEMA IN POSTGRESQL ===\n",
      "\n",
      "✅ Database schema created successfully!\n",
      "=== POPULATING PRODUCT METADATA ===\n",
      "\n",
      "WARNING: NaNs still present after fillna. Filling all remaining NaNs with 0 or 'none'.\n",
      "✅ Populated metadata for 2501 products!\n"
     ]
    }
   ],
   "source": [
    "# ================================\n",
    "# CELL 8: Model Persistence and API Preparation (PostgreSQL Version)\n",
    "# ================================\n",
    "import os\n",
    "import psycopg2\n",
    "from psycopg2.extras import execute_values\n",
    "\n",
    "# ---- CONFIGURE YOUR POSTGRES CONNECTION HERE ----\n",
    "PG_DBNAME = \"capsstone\"\n",
    "PG_USER = \"postgres\"\n",
    "PG_PASSWORD = \"1234\"\n",
    "PG_HOST = \"localhost\"\n",
    "PG_PORT = 5432\n",
    "\n",
    "def get_pg_conn():\n",
    "    return psycopg2.connect(\n",
    "        dbname=PG_DBNAME,\n",
    "        user=PG_USER,\n",
    "        password=PG_PASSWORD,\n",
    "        host=PG_HOST,\n",
    "        port=PG_PORT,\n",
    "    )\n",
    "\n",
    "def save_models_and_artifacts(forecaster, leaflet_encoder, feature_cols, target_competitors):\n",
    "    \"\"\"Save all models and necessary artifacts for API deployment\"\"\"\n",
    "    print(\"=== SAVING MODELS AND ARTIFACTS ===\\n\")\n",
    "    os.makedirs('saved_models', exist_ok=True)\n",
    "    joblib.dump(forecaster, 'saved_models/competitor_price_forecaster.pkl')\n",
    "    print(\"✅ Main forecaster saved\")\n",
    "    joblib.dump(leaflet_encoder, 'saved_models/leaflet_encoder.pkl')\n",
    "    joblib.dump(feature_cols, 'saved_models/feature_columns.pkl')\n",
    "    joblib.dump(target_competitors, 'saved_models/target_competitors.pkl')\n",
    "    artifacts = {\n",
    "        'feature_columns': feature_cols,\n",
    "        'target_competitors': target_competitors,\n",
    "        'model_version': '1.0',\n",
    "        'created_date': datetime.now().isoformat()\n",
    "    }\n",
    "    joblib.dump(artifacts, 'saved_models/model_artifacts.pkl')\n",
    "    print(\"✅ All artifacts saved successfully!\")\n",
    "    return artifacts\n",
    "\n",
    "def create_database_schema():\n",
    "    \"\"\"Create PostgreSQL database schema for API\"\"\"\n",
    "    print(\"=== CREATING DATABASE SCHEMA IN POSTGRESQL ===\\n\")\n",
    "    with get_pg_conn() as conn:\n",
    "        with conn.cursor() as cur:\n",
    "            cur.execute('''\n",
    "                CREATE TABLE IF NOT EXISTS forecasts (\n",
    "                    id SERIAL PRIMARY KEY,\n",
    "                    sku TEXT NOT NULL,\n",
    "                    time_key INTEGER NOT NULL,\n",
    "                    pvp_is_competitorA FLOAT,\n",
    "                    pvp_is_competitorB FLOAT,\n",
    "                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n",
    "                    UNIQUE(sku, time_key)\n",
    "                )\n",
    "            ''')\n",
    "            cur.execute('''\n",
    "                CREATE TABLE IF NOT EXISTS product_metadata (\n",
    "                    sku TEXT PRIMARY KEY,\n",
    "                    structure_level_1 INTEGER,\n",
    "                    structure_level_2 INTEGER,\n",
    "                    structure_level_3 INTEGER,\n",
    "                    structure_level_4 INTEGER,\n",
    "                    last_discount FLOAT DEFAULT 0.0,\n",
    "                    last_flag_promo INTEGER DEFAULT 0,\n",
    "                    last_leaflet TEXT,\n",
    "                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
    "                )\n",
    "            ''')\n",
    "        conn.commit()\n",
    "    print(\"✅ Database schema created successfully!\")\n",
    "\n",
    "def populate_product_metadata(modeling_df):\n",
    "    \"\"\"Populate product metadata table with latest product information (PostgreSQL version)\"\"\"\n",
    "    print(\"=== POPULATING PRODUCT METADATA ===\\n\")\n",
    "    latest_info = modeling_df.groupby('sku').last().reset_index()\n",
    "    # Fill NaNs for all expected columns robustly\n",
    "    fill_dict = {\n",
    "        'structure_level_1': 0,\n",
    "        'structure_level_2': 0,\n",
    "        'structure_level_3': 0,\n",
    "        'structure_level_4': 0,\n",
    "        'discount': 0.0,\n",
    "        'flag_promo': 0,\n",
    "        'leaflet_encoded': 'none'\n",
    "    }\n",
    "    latest_info = latest_info.fillna(fill_dict)\n",
    "    # If there are still NaNs, forcibly replace them (for any weird columns)\n",
    "    latest_info = latest_info.replace({pd.NA: 0, None: 0})\n",
    "    # Optionally: check for NaNs that weren't filled\n",
    "    if latest_info.isnull().values.any():\n",
    "        print(\"WARNING: NaNs still present after fillna. Filling all remaining NaNs with 0 or 'none'.\")\n",
    "        latest_info = latest_info.fillna(0)\n",
    "    data_to_insert = []\n",
    "    for _, row in latest_info.iterrows():\n",
    "        data_to_insert.append((\n",
    "            str(row['sku']),\n",
    "            int(row['structure_level_1']),\n",
    "            int(row['structure_level_2']),\n",
    "            int(row['structure_level_3']),\n",
    "            int(row['structure_level_4']),\n",
    "            float(row['discount']),\n",
    "            int(row['flag_promo']),\n",
    "            str(row['leaflet_encoded'])\n",
    "        ))\n",
    "    with get_pg_conn() as conn:\n",
    "        with conn.cursor() as cur:\n",
    "            execute_values(\n",
    "                cur,\n",
    "                '''\n",
    "                INSERT INTO product_metadata \n",
    "                (sku, structure_level_1, structure_level_2, structure_level_3, structure_level_4,\n",
    "                 last_discount, last_flag_promo, last_leaflet)\n",
    "                VALUES %s\n",
    "                ON CONFLICT (sku) DO UPDATE SET\n",
    "                    structure_level_1 = EXCLUDED.structure_level_1,\n",
    "                    structure_level_2 = EXCLUDED.structure_level_2,\n",
    "                    structure_level_3 = EXCLUDED.structure_level_3,\n",
    "                    structure_level_4 = EXCLUDED.structure_level_4,\n",
    "                    last_discount = EXCLUDED.last_discount,\n",
    "                    last_flag_promo = EXCLUDED.last_flag_promo,\n",
    "                    last_leaflet = EXCLUDED.last_leaflet,\n",
    "                    updated_at = CURRENT_TIMESTAMP\n",
    "                '''\n",
    "                , data_to_insert\n",
    "            )\n",
    "        conn.commit()\n",
    "    print(f\"✅ Populated metadata for {len(latest_info)} products!\")\n",
    "    \n",
    "# Save everything (PostgreSQL version)\n",
    "if 'forecaster' in locals():\n",
    "    saved_artifacts = save_models_and_artifacts(forecaster, leaflet_encoder, feature_cols, target_competitors)\n",
    "    create_database_schema()\n",
    "    populate_product_metadata(modeling_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 9: API Helper Functions\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Forecasting system loaded successfully!\n",
      "Error: Error in prediction: column \"pvp_is_competitora\" of relation \"forecasts\" does not exist\n",
      "LINE 2: ...            INSERT INTO forecasts (sku, time_key, pvp_is_com...\n",
      "                                                             ^\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import psycopg2\n",
    "from psycopg2.extras import execute_values\n",
    "\n",
    "# ---- CONFIGURE YOUR POSTGRES CONNECTION HERE ----\n",
    "PG_DBNAME = \"capsstone\"\n",
    "PG_USER = \"postgres\"\n",
    "PG_PASSWORD = \"1234\"\n",
    "PG_HOST = \"localhost\"\n",
    "PG_PORT = 5432\n",
    "\n",
    "\n",
    "def get_pg_conn():\n",
    "    return psycopg2.connect(\n",
    "        dbname=PG_DBNAME,\n",
    "        user=PG_USER,\n",
    "        password=PG_PASSWORD,\n",
    "        host=PG_HOST,\n",
    "        port=PG_PORT,\n",
    "    )\n",
    "\n",
    "def load_forecasting_system():\n",
    "    \"\"\"Load the complete forecasting system for API use\"\"\"\n",
    "    try:\n",
    "        forecaster = joblib.load('saved_models/competitor_price_forecaster.pkl')\n",
    "        leaflet_encoder = joblib.load('saved_models/leaflet_encoder.pkl')\n",
    "        feature_cols = joblib.load('saved_models/feature_columns.pkl')\n",
    "        target_competitors = joblib.load('saved_models/target_competitors.pkl')\n",
    "        print(\"✅ Forecasting system loaded successfully!\")\n",
    "        return forecaster, leaflet_encoder, feature_cols, target_competitors\n",
    "    except Exception as e:\n",
    "        print(f\"❌ Error loading forecasting system: {e}\")\n",
    "        return None, None, None, None\n",
    "\n",
    "def get_product_metadata(sku):\n",
    "    \"\"\"Get product metadata from PostgreSQL database\"\"\"\n",
    "    with get_pg_conn() as conn:\n",
    "        with conn.cursor() as cursor:\n",
    "            cursor.execute(\n",
    "                '''\n",
    "                SELECT * FROM product_metadata WHERE sku = %s\n",
    "                ''', (str(sku),)\n",
    "            )\n",
    "            result = cursor.fetchone()\n",
    "    if result:\n",
    "        columns = [\n",
    "            'sku', 'structure_level_1', 'structure_level_2', 'structure_level_3', \n",
    "            'structure_level_4', 'last_discount', 'last_flag_promo', 'last_leaflet', 'updated_at'\n",
    "        ]\n",
    "        return dict(zip(columns, result))\n",
    "    return None\n",
    "\n",
    "def prepare_api_features(sku, time_key, forecaster, leaflet_encoder, feature_cols):\n",
    "    \"\"\"Prepare features for API prediction\"\"\"\n",
    "    # Get product metadata\n",
    "    metadata = get_product_metadata(sku)\n",
    "    if not metadata:\n",
    "        # Use default values if metadata not found\n",
    "        metadata = {\n",
    "            'structure_level_1': 1,\n",
    "            'structure_level_2': 101,\n",
    "            'structure_level_3': 10101,\n",
    "            'structure_level_4': 1010101,\n",
    "            'last_discount': 0.0,\n",
    "            'last_flag_promo': 0,\n",
    "            'last_leaflet': 'none'\n",
    "        }\n",
    "    # Convert time_key to date features\n",
    "    date_str = str(time_key)\n",
    "    if len(date_str) == 8:\n",
    "        date = datetime.strptime(date_str, '%Y%m%d')\n",
    "    else:\n",
    "        raise ValueError(\"Invalid time_key format. Expected YYYYMMDD\")\n",
    "    # Create feature vector\n",
    "    features = {\n",
    "        'sku': int(sku),\n",
    "        'pvp_was': 20.0,  # Default price - in real API this should come from product catalog\n",
    "        'discount': metadata['last_discount'],\n",
    "        'flag_promo': metadata['last_flag_promo'],\n",
    "        'leaflet_numeric': 0,  # Will be encoded\n",
    "        'structure_level_1': metadata['structure_level_1'],\n",
    "        'structure_level_2': metadata['structure_level_2'],\n",
    "        'structure_level_3': metadata['structure_level_3'],\n",
    "        'structure_level_4': metadata['structure_level_4'],\n",
    "        'quantity': 100.0,  # Default quantity\n",
    "        'year': date.year,\n",
    "        'month': date.month,\n",
    "        'day': date.day,\n",
    "        'weekday': date.weekday(),\n",
    "        'quarter': (date.month - 1) // 3 + 1,\n",
    "        'week_of_year': date.isocalendar()[1],\n",
    "        'is_campaign': 0  # Default no campaign\n",
    "    }\n",
    "    # Encode leaflet\n",
    "    try:\n",
    "        leaflet_encoded = leaflet_encoder.transform([metadata['last_leaflet']])[0]\n",
    "        features['leaflet_numeric'] = leaflet_encoded\n",
    "    except:\n",
    "        features['leaflet_numeric'] = 0\n",
    "    # Add default values for missing features\n",
    "    for col in feature_cols:\n",
    "        if col not in features:\n",
    "            if 'lag_' in col or 'rolling_' in col or '_vs_' in col:\n",
    "                features[col] = 0.0\n",
    "            else:\n",
    "                features[col] = 0\n",
    "    # Create DataFrame with correct column order\n",
    "    feature_df = pd.DataFrame([features])\n",
    "    feature_df = feature_df.reindex(columns=feature_cols, fill_value=0)\n",
    "    return feature_df\n",
    "\n",
    "def make_forecast_prediction(sku, time_key):\n",
    "    \"\"\"Make prediction for API endpoint and store in PostgreSQL\"\"\"\n",
    "    try:\n",
    "        # Load system\n",
    "        forecaster, leaflet_encoder, feature_cols, target_competitors = load_forecasting_system()\n",
    "        if forecaster is None:\n",
    "            return None, \"Forecasting system not available\"\n",
    "        # Prepare features\n",
    "        X = prepare_api_features(sku, time_key, forecaster, leaflet_encoder, feature_cols)\n",
    "        # Make predictions\n",
    "        predictions = forecaster.predict_all(X)\n",
    "        # Format response\n",
    "        response = {\n",
    "            'sku': str(sku),\n",
    "            'time_key': int(time_key),\n",
    "            'pvp_is_competitorA': float(predictions.get('competitorA', [0.0])[0]) if 'competitorA' in predictions else 0.0,\n",
    "            'pvp_is_competitorB': float(predictions.get('competitorB', [0.0])[0]) if 'competitorB' in predictions else 0.0\n",
    "        }\n",
    "        # Store in PostgreSQL (ensure unique constraint)\n",
    "        with get_pg_conn() as conn:\n",
    "            with conn.cursor() as cur:\n",
    "                cur.execute(\n",
    "                    '''\n",
    "                    INSERT INTO forecasts (sku, time_key, pvp_is_competitorA, pvp_is_competitorB)\n",
    "                    VALUES (%s, %s, %s, %s)\n",
    "                    ON CONFLICT (sku, time_key) DO UPDATE\n",
    "                    SET pvp_is_competitorA = EXCLUDED.pvp_is_competitorA,\n",
    "                        pvp_is_competitorB = EXCLUDED.pvp_is_competitorB,\n",
    "                        created_at = CURRENT_TIMESTAMP\n",
    "                    ''',\n",
    "                    (\n",
    "                        response['sku'],\n",
    "                        response['time_key'],\n",
    "                        response['pvp_is_competitorA'],\n",
    "                        response['pvp_is_competitorB']\n",
    "                    )\n",
    "                )\n",
    "                conn.commit()\n",
    "        return response, None\n",
    "    except Exception as e:\n",
    "        return None, f\"Error in prediction: {e}\"\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    # Example for a random sku and time_key\n",
    "    example_sku = 2056\n",
    "    example_time_key = 20241115  # YYYYMMDD\n",
    "    prediction, error = make_forecast_prediction(example_sku, example_time_key)\n",
    "    if error:\n",
    "        print(\"Error:\", error)\n",
    "    else:\n",
    "        print(\"Prediction:\", prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ================================\n",
    "# CELL 10: API Handler Example (FastAPI style stub)\n",
    "# ================================"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nfrom fastapi import FastAPI, HTTPException, Request\\nfrom pydantic import BaseModel\\n\\napp = FastAPI()\\n\\nclass ForecastRequest(BaseModel):\\n    sku: str\\n    time_key: int\\n\\n@app.post('/forecast_prices/')\\ndef forecast_prices_endpoint(req: ForecastRequest):\\n    try:\\n        if not (isinstance(req.sku, str) and isinstance(req.time_key, int)):\\n            raise HTTPException(status_code=422, detail='Invalid input format.')\\n        res, err = make_forecast_prediction(req.sku, req.time_key)\\n        if err:\\n            raise HTTPException(status_code=500, detail=err)\\n        return res\\n    except Exception as exc:\\n        raise HTTPException(status_code=422, detail=str(exc))\\n\""
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "from fastapi import FastAPI, HTTPException, Request\n",
    "from pydantic import BaseModel\n",
    "\n",
    "app = FastAPI()\n",
    "\n",
    "class ForecastRequest(BaseModel):\n",
    "    sku: str\n",
    "    time_key: int\n",
    "\n",
    "@app.post('/forecast_prices/')\n",
    "def forecast_prices_endpoint(req: ForecastRequest):\n",
    "    try:\n",
    "        if not (isinstance(req.sku, str) and isinstance(req.time_key, int)):\n",
    "            raise HTTPException(status_code=422, detail='Invalid input format.')\n",
    "        res, err = make_forecast_prediction(req.sku, req.time_key)\n",
    "        if err:\n",
    "            raise HTTPException(status_code=500, detail=err)\n",
    "        return res\n",
    "    except Exception as exc:\n",
    "        raise HTTPException(status_code=422, detail=str(exc))\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b381d316",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['sku', 'time_key', 'competitor', 'pvp_was', 'discount', 'flag_promo', 'leaflet', 'date', 'final_price', 'structure_level_1', 'structure_level_2', 'structure_level_3', 'structure_level_4', 'quantity', 'year', 'month', 'day', 'weekday', 'quarter', 'week_of_year', 'price_lag_1', 'discount_lag_1', 'price_lag_7', 'discount_lag_7', 'price_lag_14', 'discount_lag_14', 'price_lag_30', 'discount_lag_30', 'price_rolling_mean_7', 'price_rolling_std_7', 'price_rolling_mean_14', 'price_rolling_std_14', 'price_rolling_mean_30', 'price_rolling_std_30', 'is_campaign', 'chain_vs_competitorA_diff', 'chain_vs_competitorA_ratio', 'chain_vs_competitorB_diff', 'chain_vs_competitorB_ratio', 'competitorA_vs_competitorB_diff', 'competitorA_vs_competitorB_ratio', 'leaflet_encoded', 'leaflet_numeric']\n"
     ]
    }
   ],
   "source": [
    "print(modeling_df.columns.tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e58fb8c",
   "metadata": {},
   "source": [
    "Fill forecats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0e5aac5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in forecasts table:\n",
      "  id (integer)\n",
      "  sku (text)\n",
      "  time_key (integer)\n",
      "  pvp_is_competitorA (double precision)\n",
      "  pvp_is_competitorB (double precision)\n",
      "  created_at (timestamp without time zone)\n",
      "  pvp_is_competitorA_actual (double precision)\n",
      "  pvp_is_competitorB_actual (double precision)\n",
      "✅ Inserted/updated 1137011 forecast rows into PostgreSQL.\n"
     ]
    }
   ],
   "source": [
    "PG_DBNAME = \"capsstone\"\n",
    "PG_USER = \"postgres\"\n",
    "PG_PASSWORD = \"1234\"\n",
    "PG_HOST = \"localhost\"\n",
    "PG_PORT = 5432\n",
    "\n",
    "def get_pg_conn():\n",
    "    return psycopg2.connect(\n",
    "        dbname=PG_DBNAME,\n",
    "        user=PG_USER,\n",
    "        password=PG_PASSWORD,\n",
    "        host=PG_HOST,\n",
    "        port=PG_PORT,\n",
    "    )\n",
    "\n",
    "# --- Check columns of forecasts table in PostgreSQL ---\n",
    "with get_pg_conn() as conn:\n",
    "    with conn.cursor() as cur:\n",
    "        cur.execute(\"\"\"\n",
    "            SELECT column_name, data_type\n",
    "            FROM information_schema.columns\n",
    "            WHERE table_name = 'forecasts'\n",
    "            ORDER BY ordinal_position\n",
    "        \"\"\")\n",
    "        columns = cur.fetchall()\n",
    "        print(\"Columns in forecasts table:\")\n",
    "        for col, dtype in columns:\n",
    "            print(f\"  {col} ({dtype})\")\n",
    "\n",
    "# --- ASSUMES modeling_df IS ALREADY LOADED ---\n",
    "\n",
    "# 1. Pivot to wide format: one row per sku/time_key, columns for each competitor's price\n",
    "pivot_df = modeling_df.pivot_table(\n",
    "    index=['sku', 'time_key'],\n",
    "    columns='competitor',\n",
    "    values='final_price'\n",
    ").reset_index()\n",
    "\n",
    "# 2. Flatten columns if MultiIndex (from pivot_table)\n",
    "if isinstance(pivot_df.columns, pd.MultiIndex):\n",
    "    pivot_df.columns = [\n",
    "        '_'.join([str(i) for i in col if i and i != '-']) for col in pivot_df.columns.values\n",
    "    ]\n",
    "\n",
    "# 3. Rename columns to match forecasts table\n",
    "pivot_df = pivot_df.rename(\n",
    "    columns={\n",
    "        'A': 'pvp_is_competitorA',\n",
    "        'B': 'pvp_is_competitorB',\n",
    "        'final_price_A': 'pvp_is_competitorA',\n",
    "        'final_price_B': 'pvp_is_competitorB'\n",
    "    }\n",
    ")\n",
    "\n",
    "# 4. Ensure data types match your PostgreSQL schema\n",
    "pivot_df['sku'] = pivot_df['sku'].astype(str)\n",
    "pivot_df['time_key'] = pivot_df['time_key'].astype(int)\n",
    "\n",
    "if 'pvp_is_competitorA' not in pivot_df.columns:\n",
    "    pivot_df['pvp_is_competitorA'] = 0.0\n",
    "if 'pvp_is_competitorB' not in pivot_df.columns:\n",
    "    pivot_df['pvp_is_competitorB'] = 0.0\n",
    "\n",
    "pivot_df['pvp_is_competitorA'] = pivot_df['pvp_is_competitorA'].astype(float).fillna(0.0)\n",
    "pivot_df['pvp_is_competitorB'] = pivot_df['pvp_is_competitorB'].astype(float).fillna(0.0)\n",
    "\n",
    "# 5. Prepare records for batch insert\n",
    "records = list(\n",
    "    pivot_df[['sku', 'time_key', 'pvp_is_competitorA', 'pvp_is_competitorB']].itertuples(index=False, name=None)\n",
    ")\n",
    "\n",
    "# 6. Bulk Insert Into PostgreSQL (QUOTED identifiers!)\n",
    "insert_query = \"\"\"\n",
    "    INSERT INTO forecasts (sku, time_key, \"pvp_is_competitorA\", \"pvp_is_competitorB\")\n",
    "    VALUES %s\n",
    "    ON CONFLICT (sku, time_key) DO UPDATE\n",
    "    SET \"pvp_is_competitorA\" = EXCLUDED.\"pvp_is_competitorA\",\n",
    "        \"pvp_is_competitorB\" = EXCLUDED.\"pvp_is_competitorB\"\n",
    "\"\"\"\n",
    "\n",
    "with get_pg_conn() as conn:\n",
    "    with conn.cursor() as cur:\n",
    "        execute_values(cur, insert_query, records)\n",
    "    conn.commit()\n",
    "\n",
    "print(f\"✅ Inserted/updated {len(records)} forecast rows into PostgreSQL.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
